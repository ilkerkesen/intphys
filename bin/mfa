#!/usr/bin/env python

import os
import os.path as osp

import click

from intphys.data import CRAFT


@click.command()
@click.option("--path", type=click.Path(exists=True))
@click.option("--split", type=str, default="random")
def main(path, split):
    path = osp.abspath(osp.expanduser(path))
    train_data = CRAFT(path=path, split="train", split_info=split)
    test_data = CRAFT(path=path, split="test", split_info=split)

    # most frequent answer
    answer_dict = dict()
    for q in train_data.questions:
        answer = q["answer"].lower()
        answer_dict[answer] = 1 + answer_dict.get(answer, 0)
   
    most_frequent, frequency = None, 0
    for (answer, count) in answer_dict.items():
        if count > frequency:
            most_frequent = answer
            frequency = count 
    
    num_correct, num_examples = 0, 0
    for q in test_data.questions:
        if q["answer"].lower() == most_frequent:
            num_correct += 1
        num_examples += 1

    print("most frequent answer = {}, accuracy = {}%".format(
        most_frequent, round(100 * num_correct / num_examples, 2)))

    answer_dict = dict()
    for q in train_data.questions:
        answer = q["answer"].lower()
        answer_type = q["answer_type"].lower()
        if not answer_type in answer_dict.keys():
            answer_dict[answer_type] = dict()
        this_dict = answer_dict[answer_type]
        this_dict[answer] = 1 + this_dict.get(answer, 0)
    
    most_frequent = {k: None for (k,v) in answer_dict.items()}
    frequency = {k: 0 for (k,v) in answer_dict.items()}
    for (answer_type, this_answer_dict) in answer_dict.items():
        for (answer, count) in this_answer_dict.items():
            if count > frequency[answer_type]:
                most_frequent[answer_type] = answer
                frequency[answer_type] = count
  
    num_correct, num_examples = 0, 0
    for q in test_data.questions:
        answer = q["answer"].lower()
        answer_type = q["answer_type"].lower()
        if answer == most_frequent[answer_type]:
            num_correct += 1
        num_examples += 1
    
    print("answer-type based most frequent answer accuracy = {}%".format(
        round(100 * num_correct / num_examples, 2))) 


if __name__ == "__main__":
    main()