#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import os.path as osp

import torch
import torch.nn as nn
from torch.nn import functional as F
from torch.utils.data import DataLoader
import pytorch_lightning as pl
import hydra

import intphys
from intphys.data import IntuitivePhysicsDataset, collate_fn
from intphys.model.baseline import BlindBaseline
from intphys.experiment import Experiment

CONFIG_DIR = osp.abspath(osp.join(__file__, "../..", "config"))

@hydra.main(config_path=osp.join(CONFIG_DIR, "train.yaml"), strict=False)
def train(config):
    config = pl.utilities.parsing.AttributeDict(config)
    pl.seed_everything(config["seed"])

    # load data
    datadir = osp.abspath(osp.expanduser(config["data"]["path"]))
    train_data = IntuitivePhysicsDataset(datadir, split="train")
    val_data = IntuitivePhysicsDataset(datadir, split="validation")
    train_dataloader = DataLoader(train_data,
                                  shuffle=True,
                                  collate_fn=collate_fn,
                                  **config["data"]["loader"])
    val_dataloader = DataLoader(val_data,
                                shuffle=False,
                                collate_fn=collate_fn,
                                **config["data"]["loader"])

    log_dir = osp.abspath(osp.expanduser(config["logger"]["dir"]))
    logger = pl.loggers.TensorBoardLogger(
        log_dir, name=config["model"]["architecture"])
    save_path = osp.join(logger.log_dir, "checkpoints/{epoch:03d}")
    checkpoint_callback = pl.callbacks.ModelCheckpoint(
        filepath=save_path, **config["checkpoint"])
    trainer = pl.Trainer(logger=logger,
                         checkpoint_callback=checkpoint_callback,
                         **config["trainer"])

    if config["model"].get("input_size") is None:
        config["model"]["input_size"] = len(train_data.question_vocab)
    if config["model"].get("output_size") is None:
        config["model"]["output_size"] = len(train_data.answer_vocab)

    model = Experiment(config)
    trainer.fit(
        model,
        train_dataloader=train_dataloader,
        val_dataloaders=val_dataloader)

    test_data = IntuitivePhysicsDataset(datadir, split="test")
    test_dataloader = DataLoader(test_data,
                                 shuffle=False,
                                 collate_fn=collate_fn,
                                 **config["data"]["loader"])
    trainer.test(test_dataloaders=test_dataloader)


if __name__ == "__main__":
    train()
