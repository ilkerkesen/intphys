#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import os.path as osp

import torch
import torch.nn as nn
from torch.nn import functional as F
from torch.utils.data import DataLoader
import pytorch_lightning as pl
import hydra


from intphys import *
from intphys.data import inference_collate_fn as collate_fn


CONFIG_DIR = osp.abspath(osp.join(__file__, "../..", "config"))


def create_dataloader(split, sim_input, config):
    dataset = IntuitivePhysicsDataset(
        split=split, sim_input=sim_input**dataset_kwargs)
    loader = DataLoader(dataset, collate_fn=collate_fn, **config["loader"])
    return loader


@hydra.main(config_path=osp.join(CONFIG_DIR, "generate.yaml"))
def train(config):
    config = pl.utilities.parsing.AttributeDict(config)
    pl.seed_everything(config["seed"])

    if config["output"] is None:
        raise("output is a required parameter.")

    # load data/model
    # data = IntuitivePhysicsDataset(**config["dataset"])
    experiment = Experiment.load_from_checkpoint(config["checkpoint"])
    experiment.config["output"] = osp.abspath(osp.expanduser(config["output"]))
    experiment.generate_flag = True
    sim_input = experiment.model.SIMULATION_INPUT

    dataloaders = [create_dataloader(s, sim_input, config) for s in SPLITS]

    if experiment.model.generate_flag == True:
        filepath = config["output"]
        parent_dir = osp.dirname(filepath)
        osp.makedirs(parent_dir) if not osp.isdir(parent_dir) else None
        with open(filepath, "w") as f:
            f.write("video_index\tquestion_index\tsplit\tprediction\n")

    # trainer
    trainer = pl.Trainer(logger=False,
                         checkpoint_callback=False,
                         # callbacks=[TSVExportCallback()],
                         **config["trainer"])
    trainer.test(experiment, test_dataloaders=dataloaders)


if __name__ == "__main__":
    train()
